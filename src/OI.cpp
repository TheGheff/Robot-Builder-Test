// RobotBuilder Version: 2.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// C++ from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.


#include "OI.h"

// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=INCLUDES
#include "SmartDashboard/SmartDashboard.h"
#include "Commands/AutoDistForward.h"
#include "Commands/AutoLeftSideForward.h"
#include "Commands/AutoLift.h"
#include "Commands/AutoRightSideForward.h"
#include "Commands/AutoSpit.h"
#include "Commands/AutoTalonDistForward.h"
#include "Commands/AutoTurnLeft.h"
#include "Commands/AutoTurnMatchDecision.h"
#include "Commands/AutoTurnMatchDecisionSecondTurn.h"
#include "Commands/AutoTurnRight.h"
#include "Commands/DriveWithGamepad.h"
#include "Commands/GobbleBlock.h"
#include "Commands/GrabBlock.h"
#include "Commands/LiftDown.h"
#include "Commands/LiftRun.h"
#include "Commands/LiftStop.h"
#include "Commands/LiftUp.h"
#include "Commands/RiserDown.h"
#include "Commands/RiserStop.h"
#include "Commands/RiserUp.h"
#include "Commands/ShootBlock.h"
#include "Commands/SpitBlock.h"
#include "Commands/Start_in_Center.h"
#include "Commands/StopIntake.h"


    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=INCLUDES

OI::OI() {
    // Process operator interface input here.
    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTORS
    nonDriveGamepad.reset(new frc::Joystick(2));
    
    nD_RiserDown.reset(new frc::JoystickButton(nonDriveGamepad.get(), 9));
    nD_RiserDown->WhileHeld(new RiserDown());
    nD_RiserUp.reset(new frc::JoystickButton(nonDriveGamepad.get(), 10));
    nD_RiserUp->WhenPressed(new RiserUp());
    nD_LiftDOWN.reset(new frc::JoystickButton(nonDriveGamepad.get(), 5));
    nD_LiftDOWN->WhileHeld(new LiftDown());
    nD_LiftUP.reset(new frc::JoystickButton(nonDriveGamepad.get(), 6));
    nD_LiftUP->WhileHeld(new LiftUp());
    nD_Shoot.reset(new frc::JoystickButton(nonDriveGamepad.get(), 4));
    nD_Shoot->WhileHeld(new ShootBlock());
    nD_Spit.reset(new frc::JoystickButton(nonDriveGamepad.get(), 2));
    nD_Spit->WhileHeld(new SpitBlock());
    nD_Gobble.reset(new frc::JoystickButton(nonDriveGamepad.get(), 3));
    nD_Gobble->WhileHeld(new GobbleBlock());
    nD_Grab.reset(new frc::JoystickButton(nonDriveGamepad.get(), 1));
    nD_Grab->WhileHeld(new GrabBlock());
    gamepad.reset(new frc::Joystick(0));
    
    shoot.reset(new frc::JoystickButton(gamepad.get(), 4));
    shoot->WhileHeld(new ShootBlock());
    spit.reset(new frc::JoystickButton(gamepad.get(), 2));
    spit->WhileHeld(new SpitBlock());
    gobble.reset(new frc::JoystickButton(gamepad.get(), 3));
    gobble->WhileHeld(new GobbleBlock());
    grab.reset(new frc::JoystickButton(gamepad.get(), 1));
    grab->WhileHeld(new GrabBlock());

    // SmartDashboard Buttons
    frc::SmartDashboard::PutData("RiserStop", new RiserStop());
    frc::SmartDashboard::PutData("RiserDown", new RiserDown());
    frc::SmartDashboard::PutData("RiserUp", new RiserUp());
    frc::SmartDashboard::PutData("AutoLift: UP", new AutoLift(.75));
    frc::SmartDashboard::PutData("AutoSpit", new AutoSpit());
    frc::SmartDashboard::PutData("AutoDistForward: ZeroDrive", new AutoDistForward(0, 0));
    frc::SmartDashboard::PutData("AutoDistForward: 132 Inches", new AutoDistForward(132, 0));
    frc::SmartDashboard::PutData("AutoDistForward: 132w/10sDelay", new AutoDistForward(132, 10));
    frc::SmartDashboard::PutData("LiftRun", new LiftRun());
    frc::SmartDashboard::PutData("LiftDown", new LiftDown());
    frc::SmartDashboard::PutData("LiftUp", new LiftUp());
    frc::SmartDashboard::PutData("ShootBlock", new ShootBlock());
    frc::SmartDashboard::PutData("GobbleBlock", new GobbleBlock());
    frc::SmartDashboard::PutData("SpitBlock", new SpitBlock());
    frc::SmartDashboard::PutData("DriveWithGamepad: Stationary", new DriveWithGamepad(0, 0));

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTORS
}

// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=FUNCTIONS

std::shared_ptr<frc::Joystick> OI::getGamepad() {
   return gamepad;
}

std::shared_ptr<frc::Joystick> OI::getNonDriveGamepad() {
   return nonDriveGamepad;
}


    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=FUNCTIONS
