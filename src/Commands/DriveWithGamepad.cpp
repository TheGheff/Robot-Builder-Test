// RobotBuilder Version: 2.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// C++ from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.


#include "DriveWithGamepad.h"
#include "Subsystems/DriveTrain.h"
#include "OI.h"
#include "WPILib.h"

// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTOR

DriveWithGamepad::DriveWithGamepad(double LeftThumbStick_Y_Axis, double RightThumbStick_Y_Axis): frc::Command() {
    m_LeftThumbStick_Y_Axis = LeftThumbStick_Y_Axis;
    m_RightThumbStick_Y_Axis = RightThumbStick_Y_Axis;
        // Use requires() here to declare subsystem dependencies
    // eg. requires(Robot::chassis.get());
    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=REQUIRES
	Requires(Robot::driveTrain.get());
    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=REQUIRES
}
    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTOR

// Called just before this Command runs the first time
void DriveWithGamepad::Initialize() {

}

// Called repeatedly when this Command is scheduled to run
void DriveWithGamepad::Execute() {
	auto driverJoystick = Robot::oi->getGamepad();  // originally auto&

double leftSide = driverJoystick->GetRawAxis(1);
double rightSide = driverJoystick->GetRawAxis(5);


	if ((bool) driverJoystick->GetRawButton(5))
	{
		leftSide = leftSide/2;
		rightSide = rightSide/2;
	}
	else if (((bool) driverJoystick->GetRawButton(5)) && ((bool) driverJoystick->GetRawButton(6)))
	{
		leftSide = leftSide/1; // The /1 is to keep the speed at 100%
		rightSide = rightSide/1;
	}
	else
	{
		leftSide = leftSide/4;
		rightSide = rightSide/4;
	}

	Robot::driveTrain->driveGamepad(-leftSide ,-rightSide);
}

// Make this return true when this Command no longer needs to run execute()
bool DriveWithGamepad::IsFinished() {
    return false;
}

// Called once after isFinished returns true
void DriveWithGamepad::End() {

}

// Called when another command which requires one or more of the same
// subsystems is scheduled to run
void DriveWithGamepad::Interrupted() {

}
