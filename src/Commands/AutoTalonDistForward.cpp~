// RobotBuilder Version: 2.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// C++ from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.


#include "AutoTalonDistForward.h"
#include "ctre/Phoenix.h"
// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTOR

AutoTalonDistForward::AutoTalonDistForward(double Distance): frc::Command() {
    m_Distance = Distance;
        // Use requires() here to declare subsystem dependencies
    // eg. requires(Robot::chassis.get());
    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=REQUIRES
	Requires(Robot::driveTrain.get());
    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=REQUIRES
}// END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTOR

// Called just before this Command runs the first time
void AutoTalonDistForward::Initialize() {
//
//	RobotMap::driveTrainDriveLeft->changeControlMode(ControlMode.Position); //Change control mode of talon, default is PercentVbus (-1.0 to 1.0)
//	RobotMap::driveTrainDriveLeft->.setFeedbackDevice(FeedbackDevice.QuadEncoder); //Set the feedback device that is hooked up to the talon
//
//	RobotMap::driveTrainDriveLeft->.setPID(0.5, 0.001, 0.00, 0.00, 360, 36, 0); //Set the PID constants (p, i, d)
//
//	RobotMap::driveTrainDriveLeft->.enableControl(); //Enable PID control on the talon



}

// Called repeatedly when this Command is scheduled to run
void AutoTalonDistForward::Execute() {
//	int currentPosition = talon.getEncPosition();
//	System.out.println(currentPosition);
//	talon.setPosition( 9158);
}

// Make this return true when this Command no longer needs to run execute()
bool AutoTalonDistForward::IsFinished() {
    return false;
}

// Called once after isFinished returns true
void AutoTalonDistForward::End() {

}

// Called when another command which requires one or more of the same
// subsystems is scheduled to run
void AutoTalonDistForward::Interrupted() {

}
