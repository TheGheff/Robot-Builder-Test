// RobotBuilder Version: 2.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// C++ from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.

#include "WPILib.h"
#include "Joystick.h"
#include "math.h"
#include "ctre/Phoenix.h"
#include "OI.h"

#include "DriveTrain.h"
#include "../RobotMap.h"
// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=INCLUDES
#include "../Commands/DriveWithGamepad.h"
// END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=INCLUDES

// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTANTS

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTANTS

DriveTrain::DriveTrain() : frc::Subsystem("DriveTrain") {
    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
    encoderRight = RobotMap::driveTrainEncoderRight;
    encoderLeft = RobotMap::driveTrainEncoderLeft;
    driveLeft = RobotMap::driveTrainDriveLeft;
    driveRight = RobotMap::driveTrainDriveRight;
    tank = RobotMap::driveTrainTank;
    analogGyro1 = RobotMap::driveTrainAnalogGyro1;

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
    double diameter = 6;
    double ticksPerRev = 2048; //set by the DIP switches on the encoder
    double distancePerRev = diameter * M_PI; //circumference
    encoderRight->SetDistancePerPulse(distancePerRev/ticksPerRev);
    encoderLeft->SetDistancePerPulse(distancePerRev/ticksPerRev);
    encoderLeft->SetReverseDirection(true);

}

void DriveTrain::InitDefaultCommand() {
    // Set the default command for a subsystem here.
    // SetDefaultCommand(new MySpecialCommand());
    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DEFAULT_COMMAND

        SetDefaultCommand(new DriveWithGamepad(0, 0));

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DEFAULT_COMMAND
}

void DriveTrain::Periodic() {
    // Put code here to be run every loop

}

// Put methods for controlling this subsystem
// here. Call these from Commands.

void DriveTrain::driveGamepad(double left, double right){

	tank->TankDrive(left, right, false);
}

void DriveTrain::drivePrecisionGamepad(double left, double right){

	tank->TankDrive(left, right, true);
}

void DriveTrain::driveAutoDistance(double Speed){


	tank->TankDrive(Speed, Speed, true);
}

void DriveTrain::driveStraight(double leftSpeed, double rightSpeed, double leftEncoder, double rightEncoder ){

	tank->TankDrive(leftSpeed, (rightSpeed), false);
}
