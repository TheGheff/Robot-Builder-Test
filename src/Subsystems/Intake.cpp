// RobotBuilder Version: 2.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// C++ from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.



#include "Commands/StopIntake.h"
#include "Intake.h"
#include "../RobotMap.h"
// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=INCLUDES
// END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=INCLUDES

// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTANTS

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTANTS

Intake::Intake() : frc::Subsystem("Intake") {
    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
    intakeLeft = RobotMap::intakeIntakeLeft;
    intakeRight = RobotMap::intakeIntakeRight;

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
}

void Intake::InitDefaultCommand() {
    // Set the default command for a subsystem here.
    // SetDefaultCommand(new MySpecialCommand());
    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DEFAULT_COMMAND

        SetDefaultCommand(new StopIntake());

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DEFAULT_COMMAND
}

void Intake::Periodic() {
    // Put code here to be run every loop

}


// Put methods for controlling this subsystem
// here. Call these from Commands.
void Intake::Grab() {
    SmartDashboard::PutString("DB/String 0", "Grab");
	intakeLeft->Set(.5);
	intakeRight->Set(.5);
}

void Intake::Gobble() {
    SmartDashboard::PutString("DB/String 1", "Gobble");
	intakeLeft->Set(1);
	intakeRight->Set(1);
}

void Intake::Spit() {
	SmartDashboard::PutString("DB/String 5", "Spit");
	intakeLeft->Set(-.5);
	intakeRight->Set(-.5);
}

void Intake::Shoot() {
	SmartDashboard::PutString("DB/String 6", "Shoot");
	intakeLeft->Set(-10);
	intakeRight->Set(-10);
}

void Intake::Stop() {
    // Put code here to be run every loop
	//SmartDashboard::PutString("DB/String 0", "Stop");
	//SmartDashboard::PutString("DB/String 1", "Stop");
	//SmartDashboard::PutString("DB/String 5", "Stop");
	//SmartDashboard::PutString("DB/String 6", "Stop");
	intakeLeft->Set(0);
	intakeRight->Set(0);
}
