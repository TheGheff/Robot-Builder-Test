// RobotBuilder Version: 2.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// C++ from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.


#include "Robot.h"

// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=INITIALIZATION
std::shared_ptr<DriveTrain> Robot::driveTrain;
std::shared_ptr<Lift> Robot::lift;
std::shared_ptr<Intake> Robot::intake;
std::shared_ptr<Riser> Robot::riser;
std::unique_ptr<OI> Robot::oi;

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=INITIALIZATION

void Robot::RobotInit() {
	RobotMap::init();

	// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTORS
    driveTrain.reset(new DriveTrain());
    lift.reset(new Lift());
    intake.reset(new Intake());
    riser.reset(new Riser());

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTORS
	// This MUST be here. If the OI creates Commands (which it very likely
	// will), constructing it during the construction of CommandBase (from
	// which commands extend), subsystems are not guaranteed to be
	// yet. Thus, their requires() statements may grab null pointers. Bad
	// news. Don't move it.
	oi.reset(new OI());

//	chooser = (new frc::SendableChooser());
	// Add commands to Autonomous Sendable Chooser
	// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=AUTONOMOUS

	chooser.AddDefault("AutoDistForward: Default", new AutoDistForward(132, 0));  //new  replaced by &

	chooser.AddObject("AutoDistForward: ZeroDrive", new AutoDistForward(132, 0));
	chooser.AddObject("AutoDistForward: 132 Inches", new AutoDistForward(132, 0));
	chooser.AddObject("AutoDistForward: 132w/10sDelay", new AutoDistForward(132, 0));

	//chooser.AddDefault("AutoDistForward: Default", new AutoDistForward(132, 0));  //new  replaced by &

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=AUTONOMOUS
	frc::SmartDashboard::PutData("Auto Modes", &chooser);
	CameraServer::GetInstance()->StartAutomaticCapture();
}

/**
 * This function is called when the disabled button is hit.
 * You can use it to reset subsystems before shutting down.
 */
void Robot::DisabledInit(){

}

void Robot::DisabledPeriodic() {
	frc::Scheduler::GetInstance()->Run();
}

void Robot::AutonomousInit() {
	autonomousCommand = new AutoDistForward(132, 0);//chooser.GetSelected();
	if (autonomousCommand != nullptr)
		autonomousCommand->Start();
}

void Robot::AutonomousPeriodic() {
	frc::Scheduler::GetInstance()->Run();
//	static double m_Dist_Traveled_Left;
//	static double m_Dist_Traveled_Right;
//
//	m_Dist_Traveled_Left = RobotMap::driveTrainEncoderLeft->GetDistance();
//	m_Dist_Traveled_Right = RobotMap::driveTrainEncoderRight->GetDistance();
//if ((m_Dist_Traveled_Left < 132) || (m_Dist_Traveled_Right < 132))
//		{
//	Robot::driveTrain->driveStraight(.2, .2, m_Dist_Traveled_Left, m_Dist_Traveled_Right );
//		}
//
//else
//{
//	Robot::driveTrain->driveStraight(0, 0, m_Dist_Traveled_Left, m_Dist_Traveled_Right );
//}
//}
}

void Robot::TeleopInit() {
	// This makes sure that the autonomous stops running when
	// teleop starts running. If you want the autonomous to
	// continue until interrupted by another command, remove
	// these lines or comment it out.
	if (autonomousCommand != nullptr)
		autonomousCommand->Cancel();
}

void Robot::TeleopPeriodic() {
	frc::Scheduler::GetInstance()->Run();
}

START_ROBOT_CLASS(Robot);

